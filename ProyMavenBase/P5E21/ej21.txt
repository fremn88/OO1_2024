Java proporciona varias implementaciones de la interfaz Map en el paquete java.util, cada una diseñada para casos de uso específicos. A continuación, te explico las principales implementaciones y cuáles de ellas son destinadas para uso general:

1. HashMap
Descripción: Es una de las implementaciones de Map más común. Almacena los elementos en una tabla hash, lo que permite acceder a los elementos en tiempo constante 
O(1) en promedio para operaciones de inserción, búsqueda y eliminación.
Uso: Es adecuada para situaciones donde el orden de inserción no es importante, y se necesita una estructura de datos rápida para búsquedas y almacenamiento.
Características:
Permite null como clave y como valor.
No es sincronizada (no es segura para múltiples hilos).
No garantiza ningún orden de los elementos.
Uso General: Sí, es una implementación de uso general.
2. LinkedHashMap
Descripción: Extiende HashMap y mantiene una lista doblemente enlazada de los elementos según el orden en que fueron insertados. Esto permite que el mapa mantenga un orden de inserción.
Uso: Ideal cuando se desea un Map con orden predecible, como el orden de inserción o el orden de acceso (se puede configurar).
Características:
Permite null como clave y como valor.
No es sincronizada.
Mantiene el orden de inserción o el de acceso.
Uso General: Sí, es una implementación de uso general.
3. TreeMap
Descripción: Implementa la interfaz NavigableMap, que a su vez extiende SortedMap. Almacena los elementos en un árbol rojo-negro, lo que permite mantener los elementos ordenados de acuerdo con el orden natural de las claves o un Comparator proporcionado.
Uso: Es útil cuando se necesita un Map ordenado de forma natural o con un orden específico definido por un Comparator.
Características:
No permite null como clave (aunque permite null como valor).
No es sincronizada.
Mantiene los elementos ordenados de acuerdo con el orden de las claves.
Uso General: Sí, es una implementación de uso general.
4. Hashtable
Descripción: Es una implementación más antigua de Map, introducida antes de que existiera la interfaz Map. Es similar a HashMap, pero está sincronizada, lo que significa que es segura para su uso en aplicaciones multihilo.
Uso: Generalmente se desaconseja su uso en favor de ConcurrentHashMap para entornos de múltiples hilos, ya que tiene una implementación de sincronización menos eficiente.
Características:
No permite null como clave ni como valor.
Está sincronizada.
No garantiza ningún orden de los elementos.
Uso General: Aunque es de uso general, su uso es menos común en las aplicaciones modernas debido a la existencia de alternativas más eficientes.
5. ConcurrentHashMap
Descripción: Es una implementación de Map optimizada para su uso en aplicaciones multihilo. Permite operaciones concurrentes eficientes dividiendo internamente el mapa en segmentos.
Uso: Ideal para aplicaciones de alto rendimiento que requieren acceso concurrente sin bloquear todo el mapa.
Características:
No permite null como clave ni como valor.
Está sincronizada para operaciones concurrentes.
No garantiza ningún orden de los elementos.
Uso General: Sí, es ampliamente utilizada para aplicaciones multihilo, aunque no es de uso general en aplicaciones de un solo hilo.
Resumen
De estas implementaciones, las que se consideran de uso general para aplicaciones de un solo hilo son:

HashMap
LinkedHashMap
TreeMap
Para entornos concurrentes, la implementación recomendada es ConcurrentHashMap en lugar de Hashtable, debido a su eficiencia mejorada en aplicaciones multihilo.